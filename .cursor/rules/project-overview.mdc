---
description: 
globs: 
alwaysApply: true
---


# 低代码拖动平台项目结构

## 项目概述
本项目旨在开发一个基于网页的低代码拖动平台，用户可以通过拖拽组件快速构建业务界面。平台分为三个主要部分：左侧的组件列表、中间的操作面板以及右侧的属性设置区。用户可以从左侧组件列表中拖拽组件到中间操作面板进行自由组合，并通过右侧的属性设置区对组件进行详细配置。平台支持组件的拖动、缩放操作，并提供保存和预览功能。

## 目录结构
```typescript
low-code-drag/
├── src/
│   ├── components/         // 可复用组件
│   │   ├── ComponentList/ // 左侧组件列表
│   │   ├── Canvas/       // 中间画布区域
│   │   └── PropertyPanel/ // 右侧属性面板
│   ├── layouts/           // 布局相关组件
│   ├── store/            // 状态管理
│   ├── types/            // TypeScript 类型定义
│   └── utils/            // 工具函数
├── public/               // 静态资源
└── package.json          // 项目依赖
```

## 核心功能模块

## 2. 功能需求

### 2.1 页面布局
- **左侧组件列表**
  - **分类展示**：组件按类别分组展示，例如表单组件、布局组件、图表组件等。
  - **组件图标与名称**：每个组件以图标和名称的形式展示，方便用户识别。
  - **搜索功能**：提供搜索框，用户可以通过关键词快速查找所需组件。
- **中间操作面板**
  - **空白画布**：初始状态为一个空白区域，用户可以在此拖拽组件进行布局。
  - **组件拖拽**：用户可以从左侧组件列表中拖拽组件到操作面板。
  - **组件缩放**：支持对组件进行缩放操作，缩放比例可自定义。
  - **组件对齐与分布**：提供对齐工具（左对齐、右对齐、居中对齐等）和分布工具（水平分布、垂直分布等）。
- **右侧属性设置区**
  - **组件属性展示**：点击操作面板中的组件后，右侧显示该组件的属性设置项，例如大小、颜色、入参等。
  - **动态属性更新**：用户在右侧修改组件属性后，操作面板中的组件实时更新显示效果。
  - **属性分类**：属性设置项按功能分类展示，例如样式属性、行为属性等。

### 2.2 组件功能
- **组件分类**
  - **表单组件**：包括输入框、下拉框、单选按钮、复选框等。
  - **布局组件**：例如栅格布局、卡片布局等。
  - **图表组件**：如柱状图、折线图、饼图等。
  - **其他组件**：如按钮、文本标签等。
- **组件交互**
  - **拖拽交互**：组件在操作面板中可以自由拖动，拖动过程中显示辅助线以帮助用户对齐。
  - **缩放交互**：通过鼠标滚轮或拖拽组件边框实现缩放，缩放比例实时显示。
  - **选中交互**：点击组件时高亮显示，并在右侧属性设置区显示该组件的属性。

### 2.3 保存与预览
- **保存功能**
  - **保存按钮**：在页面顶部提供保存按钮，点击后将当前操作面板的布局和组件属性保存为一个项目。
  - **项目管理**：支持对已保存项目的管理，包括查看、编辑、删除等操作。
- **预览功能**
  - **预览按钮**：在页面顶部提供预览按钮，点击后以全屏模式展示操作面板的最终效果。
  - **交互测试**：在预览模式下，用户可以测试组件的交互功能，例如点击按钮、输入表单等。

## 3. 技术选型

### 3.1 前端技术
- **框架**：React
  - **理由**：React具有高效的DOM更新机制和组件化开发模式，适合构建复杂的用户界面。
- **布局框架**：React-Grid-Layout
  - **理由**：React-Grid-Layout是一个基于React的网格布局库，支持拖拽、缩放和响应式布局，能够满足操作面板的布局需求。
- **状态管理**：Redux
  - **理由**：Redux可以方便地管理组件列表、操作面板和属性设置区之间的状态共享，确保数据的一致性和可维护性。
- **UI组件库**：Ant Design
  - **理由**：Ant Design提供了丰富的UI组件，包括表单组件、布局组件等，能够快速实现页面的交互效果。

 
## 4. 界面设计

### 4.1 页面布局
- **左侧组件列表**：宽度固定，高度自适应，背景色为浅灰色，组件分类以折叠面板形式展示。
- **中间操作面板**：占据页面主体部分，背景色为白色，初始状态为一个空白矩形区域，边缘有虚线边框。
- **右侧属性设置区**：宽度固定，高度自适应，背景色为浅灰色，属性设置项以表单形式展示。

### 4.2 组件样式
- **组件图标**：使用SVG图标，每个组件图标大小为24px × 24px，鼠标悬停时图标放大至28px × 28px。
- **组件边框**：选中组件时，边框颜色为蓝色，边框宽度为2px，边框带有可拖拽的缩放手柄。
- **辅助线**：拖动组件时，显示灰色辅助线，辅助线宽度为1px，帮助用户对齐组件。

## 5. 数据模型

### 5.1 组件数据模型
```json
{
  "id": "component-1",
  "type": "input",
  "category": "form",
  "properties": {
    "width": "100%",
    "height": "40px",
    "placeholder": "请输入内容"
  },
  "position": {
    "x": 10,
    "y": 20
  },
  "size": {
    "width": 200,
    "height": 40
  }
}
```

### 5.2 项目数据模型
```json
{
  "projectId": "project-1",
  "name": "我的项目",
  "components": [
    {
      "id": "component-1",
      "type": "input",
      "category": "form",
      "properties": {
        "width": "100%",
        "height": "40px",
        "placeholder": "请输入内容"
      },
      "position": {
        "x": 10,
        "y": 20
      },
      "size": {
        "width": 200,
        "height": 40
      }
    }
  ]
}
```

## 6. 交互流程

### 6.1 拖拽组件
1. 用户在左侧组件列表中点击并拖拽一个组件。
2. 组件被拖拽到中间操作面板时，显示一个半透明的组件预览。
3. 用户释放鼠标后，组件被放置在操作面板中，并自动调整大小以适应布局。

### 6.2 缩放组件
1. 用户点击操作面板中的组件，使其处于选中状态。
2. 用户通过鼠标滚轮或拖拽组件边框的缩放手柄调整组件大小。
3. 缩放过程中，组件的宽高比例保持不变，实时显示缩放比例。

### 6.3 设置组件属性
1. 用户点击操作面板中的组件，右侧属性设置区显示该组件的属性。
2. 用户在右侧属性设置区修改组件属性，例如宽度、高度、文本内容等。
3. 修改后，操作面板中的组件实时更新显示效果。

### 6.4 保存与预览
1. 用户完成布局和属性设置后，点击页面顶部的保存按钮。
2. 系统提示保存成功，并将项目数据存储到数据库中。
3. 用户点击预览按钮，进入全屏预览模式，展示操作面板的最终效果。
4. 在预览模式下，用户可以测试组件的交互功能。


 

## 10. 附录

### 10.1 参考资料
- [React-Grid-Layout官方文档](https://github.com/react-grid-layout/react-grid-layout)
- [Ant Design官方文档](https://ant.design/)
- [Redux官方文档](https://redux.js.org/)

 
